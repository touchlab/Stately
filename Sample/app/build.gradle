repositories {
  google()
  jcenter()
  mavenCentral()
  mavenLocal()
  maven {
    url "https://oss.sonatype.org/content/repositories/snapshots/"
  }
}

apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'

android {
  compileSdkVersion 28
  defaultConfig {
    applicationId 'co.touchlab.statelysample'
    minSdkVersion 15
    targetSdkVersion 28
    versionCode 1
    versionName '1.0'
    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
  }
  buildTypes {
    release {
      minifyEnabled false
    }
  }
  packagingOptions {
    exclude("META-INF/*.kotlin_module")
    exclude("META-INF/proguard/*")
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation 'com.android.support:appcompat-v7:28.0.0'
  implementation 'com.android.support.constraint:constraint-layout:1.1.3'
  androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

kotlin {
  android()
  // This is for iPhone emulator
  // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
  iosX64("ios") {
    binaries {
      framework()
    }
  }
  sourceSets {
    commonMain {
      dependencies {
        implementation kotlin('stdlib-common')
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$COROUTINES_VERSION"
        implementation "co.touchlab:stately-common:$VERSION_NAME"
        implementation "co.touchlab:stately-isolate:$VERSION_NAME"
        implementation "co.touchlab:stately-iso-collections:$VERSION_NAME"
      }
    }
    commonTest {
      dependencies {
        implementation kotlin('test-common')
        implementation kotlin('test-annotations-common')
      }
    }
    androidMain {
      dependencies {
        implementation kotlin('stdlib')
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$COROUTINES_VERSION"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$COROUTINES_VERSION"
      }
    }
    androidTest {
      dependencies {
        implementation kotlin('test')
        implementation kotlin('test-junit')
      }
    }
    iosMain {
      dependencies {
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$COROUTINES_VERSION"
      }
    }
    iosTest {
    }
  }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
  def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
  def target = project.findProperty('kotlin.target') ?: 'ios'
  dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

  doLast {
    def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
    def targetDir = getProperty('configuration.build.dir')
    copy {
      from srcFile.parent
      into targetDir
      include 'app.framework/**'
      include 'app.framework.dSYM'
    }
  }
}
