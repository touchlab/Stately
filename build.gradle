/*
 * Copyright (C) 2018 Touchlab, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        google()
        gradlePluginPortal()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VERSION"
        classpath 'com.android.tools.build:gradle:3.5.1'
        classpath "org.jlleitschuh.gradle:ktlint-gradle:9.2.1"
    }
}

plugins {
    id 'org.jetbrains.kotlinx.binary-compatibility-validator' version '0.12.1'
}

apiValidation {
    ignoredProjects += ["stately-collections", "stately-common", "stately-iso-collections", "stately-isolate"]
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
        jcenter()
    }
}

allprojects {
    tasks.register('publishWindows') {
        if(project.tasks.findByName('publishMingwX64PublicationToMavenRepository')) {
            dependsOn 'publishMingwX64PublicationToMavenRepository', 'publishMingwX86PublicationToMavenRepository'
        }
    }

    tasks.register('publishLinux') {
        if(project.tasks.findByName('publishLinuxMips32PublicationToMavenRepository')) {
            dependsOn 'publishLinuxMips32PublicationToMavenRepository'
        }
    }
}

def runKtLint = false

subprojects {
    if(runKtLint) {
        apply plugin: "org.jlleitschuh.gradle.ktlint"
        ktlint {
            version.set("0.37.2")
            enableExperimentalRules.set(true)
            verbose.set(true)
            filter {
                exclude { it.file.path.contains("build/") }
            }
        }

        afterEvaluate {
            tasks.named("check").configure {
                dependsOn(tasks.getByName("ktlintCheck"))
            }
        }
    }
}